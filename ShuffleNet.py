{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1R0C625FxD1YAdavv8lmp_ViNvhmsaR5r","authorship_tag":"ABX9TyObBmBrAKutEfBkfapIXzwt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import torch\n","from torch import optim\n","import torch.nn as nn\n","from PIL import Image\n","from matplotlib import pyplot as plt\n","import os"],"metadata":{"id":"wJQkaUGgjmrn","executionInfo":{"status":"ok","timestamp":1701068046511,"user_tz":-360,"elapsed":791,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["# **Create the Custom Dataset Class**"],"metadata":{"id":"TZoKs6DpkH3j"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"b3ajXGn7d0kt","executionInfo":{"status":"ok","timestamp":1701066780975,"user_tz":-360,"elapsed":4828,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}}},"outputs":[],"source":["from torch.utils.data import Dataset\n","\n","class CustomDataset(Dataset):\n","  def __init__(self, X, y, BatchSize, transform):\n","    super().__init__()\n","    self.BatchSize = BatchSize\n","    self.y = y\n","    self.X = X\n","    self.transform = transform\n","\n","  def num_of_batches(self):\n","    \"\"\"\n","    Detect the total number of batches\n","    \"\"\"\n","    return math.floor(len(self.list_IDs) / self.BatchSize)\n","\n","  def __getitem__(self,idx):\n","    class_id = self.y[idx]\n","    img = self.X[idx].reshape(28,28)\n","    img = Image.fromarray(np.uint8(img * 255)).convert('L')\n","    img = self.transform(img)\n","    return img, torch.tensor(int(class_id))\n","\n","  def __len__(self):\n","    return len(self.X)"]},{"cell_type":"markdown","source":["# **Look at Images**"],"metadata":{"id":"5P4SGUWEkaiH"}},{"cell_type":"code","source":["# load data\n","df = pd.read_csv(r\"/content/drive/MyDrive/Digital Image Processing/data_set/train.csv\",dtype = np.float32)\n","\n","# Shuffle dataframe\n","df = df.sample(frac=1)\n","\n","# Split data into features X and labels y\n","X = df.loc[:, df.columns != \"label\"].values / 255\n","y = df.label.values\n","\n","fig,ax = plt.subplots(2,5)\n","for i in range(10):\n","    nparray = X[i].reshape(28,28)\n","    image = Image.fromarray(nparray * 255)\n","    ax[i%2][i//2].imshow(image)\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"usmy4rqPe0Lm","executionInfo":{"status":"ok","timestamp":1701068117554,"user_tz":-360,"elapsed":5731,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}},"outputId":"ba0ca365-6674-4108-9318-4e7291f96b4f"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Instantiate the Datasets**"],"metadata":{"id":"dhrsNtEqkmLn"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from torch.utils.data import DataLoader\n","from torchvision import transforms\n","\n","# Define Transforms\n","transform = transforms.Compose([\n","                transforms.RandomRotation(10, fill=0),\n","                transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.05),\n","                transforms.ToTensor(),\n","                transforms.RandomAffine(degrees=0, translate=(0.025, 0.025), fill=256),\n","                transforms.Normalize([0.5], [0.5])\n","            ])\n","\n","test_transform = transforms.Compose([\n","                transforms.ToTensor(),\n","                transforms.Normalize((0.5,), (0.5,)),\n","            ])\n","\n","train_ratio = 0.90\n","\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=1 - train_ratio, stratify = y, random_state = 0)\n","\n","dataset_stages = ['train', 'val']\n","\n","batch_size = 320\n","image_datasets = {'train' : CustomDataset(X_train, y_train, batch_size, transform), 'val' : CustomDataset(X_val, y_val, batch_size, test_transform)}\n","dataloaders = {x: DataLoader(image_datasets[x], batch_size=image_datasets[x].BatchSize,\n","                                            shuffle=True, num_workers=0)\n","            for x in dataset_stages}\n","\n","dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}"],"metadata":{"id":"LrE_UPEij_oX","executionInfo":{"status":"ok","timestamp":1701068321677,"user_tz":-360,"elapsed":692,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["# **Test Images from Dataset**"],"metadata":{"id":"P9Wddctzk132"}},{"cell_type":"code","source":["fig,ax = plt.subplots(2,5)\n","for i in range(10):\n","    nparray = image_datasets['train'][i][0].cpu().numpy()\n","    image = transforms.ToPILImage()(image_datasets['train'][i][0].cpu()).convert(\"RGB\")\n","    ax[i%2][i//2].imshow(image)\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"67nzACHrkxgQ","executionInfo":{"status":"ok","timestamp":1701068352950,"user_tz":-360,"elapsed":1818,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}},"outputId":"9b65174b-f34b-4479-aa26-15041fa1e5ef"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Create a Training Function**"],"metadata":{"id":"sxDo7vfVlDeW"}},{"cell_type":"code","source":["import time\n","\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","def train_model(model, criterion, optimizer, scheduler, num_epochs=10):\n","    since = time.time()\n","    best_acc = 0.0\n","\n","    for epoch in range(num_epochs):\n","        print('Epoch {}/{}'.format(epoch, num_epochs - 1))\n","        print('-' * 10)\n","        # Each epoch has a training and validation phase\n","        for phase in ['train', 'val']:\n","            if phase == 'train':\n","                model.train()  # Set model to training mode\n","            else:\n","                model.eval()   # Set model to evaluate mode\n","\n","            running_loss = 0.0\n","            running_corrects = 0\n","            num_batches = 0\n","            outputs = None\n","            # Iterate over data.\n","            for inputs, labels in dataloaders[phase]:\n","                # Loading Bar\n","                if (phase == 'train'):\n","                    num_batches += 1\n","                    percentage_complete = ((num_batches * batch_size) / (dataset_sizes[phase])) * 100\n","                    percentage_complete = np.clip(percentage_complete, 0, 100)\n","                    print(\"{:0.2f}\".format(percentage_complete), \"% complete\", end=\"\\r\")\n","\n","                inputs = inputs.to(device)\n","                labels = labels.to(device)\n","\n","                # zero the parameter gradients\n","                optimizer.zero_grad()\n","\n","                # forward\n","                # track history if only in train\n","                with torch.set_grad_enabled(phase == 'train'):\n","                    outputs = model(inputs)\n","                    loss = criterion(outputs.float(), labels)\n","                    # backward + optimize only if in training phase\n","                    if phase == 'train':\n","                        loss.backward()\n","                        # TODO: try removal\n","                        torch.nn.utils.clip_grad_norm_(model.parameters(), 1)\n","                        optimizer.step()\n","\n","                # statistics\n","                running_loss += loss.item() * inputs.size(0)\n","\n","                predicted = torch.max(outputs.data, 1)[1]\n","                running_correct = (predicted == labels).sum()\n","                running_corrects += running_correct\n","            if phase == 'train':\n","                scheduler.step()\n","\n","            epoch_loss = running_loss / dataset_sizes[phase]\n","\n","            epoch_acc = running_corrects / dataset_sizes[phase]\n","            #epoch_acc = sum(epoch_acc) / len(epoch_acc)\n","\n","            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n","                phase, epoch_loss, epoch_acc.item()))\n","\n","    time_elapsed = time.time() - since\n","    print('Training complete in {:.0f}m {:.0f}s'.format(\n","        time_elapsed // 60, time_elapsed % 60))\n","    return model"],"metadata":{"id":"uem3pkinlCX2","executionInfo":{"status":"ok","timestamp":1701068448878,"user_tz":-360,"elapsed":478,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["# **Load up Shufflenet**"],"metadata":{"id":"j48P0Q0IlM1u"}},{"cell_type":"code","source":["from torchvision import models\n","from torch.optim import lr_scheduler\n","\n","shufflenet = models.shufflenet_v2_x1_0()\n","shufflenet.conv1[0] = nn.Conv2d(1, 24, kernel_size=(2, 2), stride=(1, 1))\n","shufflenet.fc = nn.Linear(in_features=1024, out_features=10, bias=True)\n","model_ft = shufflenet"],"metadata":{"id":"1HCNM8dhlRV3","executionInfo":{"status":"ok","timestamp":1701068580547,"user_tz":-360,"elapsed":5,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["criterion = nn.CrossEntropyLoss()\n","\n","optimizer_ft = optim.Adam(model_ft.parameters(), lr=0.01)\n","\n","exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\n","\n","shufflenet = train_model(shufflenet.to(device), criterion, optimizer_ft, exp_lr_scheduler, 35)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0ZPx36NUlYTX","executionInfo":{"status":"ok","timestamp":1701082385204,"user_tz":-360,"elapsed":13801077,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}},"outputId":"ed6a7ee0-14aa-45fa-da61-8a2f064d5683"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 0/34\n","----------\n","train Loss: 0.9065 Acc: 0.7132\n","val Loss: 1.5915 Acc: 0.6562\n","Epoch 1/34\n","----------\n","train Loss: 0.1559 Acc: 0.9533\n","val Loss: 0.2057 Acc: 0.9360\n","Epoch 2/34\n","----------\n","train Loss: 0.1122 Acc: 0.9656\n","val Loss: 0.6467 Acc: 0.8129\n","Epoch 3/34\n","----------\n","train Loss: 0.0941 Acc: 0.9709\n","val Loss: 0.3780 Acc: 0.8986\n","Epoch 4/34\n","----------\n","train Loss: 0.0818 Acc: 0.9738\n","val Loss: 0.2540 Acc: 0.9440\n","Epoch 5/34\n","----------\n","train Loss: 0.0787 Acc: 0.9760\n","val Loss: 0.0821 Acc: 0.9748\n","Epoch 6/34\n","----------\n","train Loss: 0.0695 Acc: 0.9785\n","val Loss: 0.3310 Acc: 0.9012\n","Epoch 7/34\n","----------\n","train Loss: 0.0366 Acc: 0.9882\n","val Loss: 0.0386 Acc: 0.9874\n","Epoch 8/34\n","----------\n","train Loss: 0.0312 Acc: 0.9897\n","val Loss: 0.0362 Acc: 0.9879\n","Epoch 9/34\n","----------\n","train Loss: 0.0256 Acc: 0.9924\n","val Loss: 0.0383 Acc: 0.9883\n","Epoch 10/34\n","----------\n","train Loss: 0.0232 Acc: 0.9920\n","val Loss: 0.0366 Acc: 0.9881\n","Epoch 11/34\n","----------\n","train Loss: 0.0217 Acc: 0.9931\n","val Loss: 0.0357 Acc: 0.9900\n","Epoch 12/34\n","----------\n","train Loss: 0.0192 Acc: 0.9936\n","val Loss: 0.0349 Acc: 0.9886\n","Epoch 13/34\n","----------\n","train Loss: 0.0194 Acc: 0.9939\n","val Loss: 0.0366 Acc: 0.9890\n","Epoch 14/34\n","----------\n","train Loss: 0.0173 Acc: 0.9946\n","val Loss: 0.0347 Acc: 0.9893\n","Epoch 15/34\n","----------\n","train Loss: 0.0151 Acc: 0.9950\n","val Loss: 0.0342 Acc: 0.9890\n","Epoch 16/34\n","----------\n","train Loss: 0.0159 Acc: 0.9946\n","val Loss: 0.0348 Acc: 0.9898\n","Epoch 17/34\n","----------\n","train Loss: 0.0150 Acc: 0.9949\n","val Loss: 0.0328 Acc: 0.9900\n","Epoch 18/34\n","----------\n","train Loss: 0.0150 Acc: 0.9951\n","val Loss: 0.0334 Acc: 0.9900\n","Epoch 19/34\n","----------\n","train Loss: 0.0147 Acc: 0.9954\n","val Loss: 0.0328 Acc: 0.9907\n","Epoch 20/34\n","----------\n","train Loss: 0.0154 Acc: 0.9949\n","val Loss: 0.0329 Acc: 0.9910\n","Epoch 21/34\n","----------\n","train Loss: 0.0143 Acc: 0.9951\n","val Loss: 0.0330 Acc: 0.9907\n","Epoch 22/34\n","----------\n","train Loss: 0.0148 Acc: 0.9952\n","val Loss: 0.0321 Acc: 0.9907\n","Epoch 23/34\n","----------\n","train Loss: 0.0132 Acc: 0.9960\n","val Loss: 0.0326 Acc: 0.9905\n","Epoch 24/34\n","----------\n","train Loss: 0.0140 Acc: 0.9958\n","val Loss: 0.0331 Acc: 0.9902\n","Epoch 25/34\n","----------\n","train Loss: 0.0131 Acc: 0.9959\n","val Loss: 0.0335 Acc: 0.9907\n","Epoch 26/34\n","----------\n","train Loss: 0.0130 Acc: 0.9957\n","val Loss: 0.0333 Acc: 0.9907\n","Epoch 27/34\n","----------\n","train Loss: 0.0137 Acc: 0.9955\n","val Loss: 0.0331 Acc: 0.9905\n","Epoch 28/34\n","----------\n","train Loss: 0.0141 Acc: 0.9952\n","val Loss: 0.0331 Acc: 0.9902\n","Epoch 29/34\n","----------\n","train Loss: 0.0137 Acc: 0.9954\n","val Loss: 0.0331 Acc: 0.9905\n","Epoch 30/34\n","----------\n","train Loss: 0.0137 Acc: 0.9956\n","val Loss: 0.0338 Acc: 0.9907\n","Epoch 31/34\n","----------\n","train Loss: 0.0133 Acc: 0.9955\n","val Loss: 0.0329 Acc: 0.9907\n","Epoch 32/34\n","----------\n","train Loss: 0.0139 Acc: 0.9956\n","val Loss: 0.0335 Acc: 0.9907\n","Epoch 33/34\n","----------\n","train Loss: 0.0131 Acc: 0.9957\n","val Loss: 0.0326 Acc: 0.9905\n","Epoch 34/34\n","----------\n","train Loss: 0.0139 Acc: 0.9954\n","val Loss: 0.0330 Acc: 0.9905\n","Training complete in 230m 1s\n"]}]},{"cell_type":"markdown","source":["# **Run on Test Set**"],"metadata":{"id":"_7Z1ytX-ldu2"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","\n","accuracy_scores = []\n","predicted = []\n","\n","running_corrects = 0\n","outputs = None\n","\n","test_df = pd.read_csv(\"/content/drive/MyDrive/Digital Image Processing/data_set/test.csv\")\n","\n","for input in test_df.values:\n","    input = input.reshape(28,28)\n","    input = Image.fromarray(np.uint8(input)).convert('L')\n","    inputs = test_transform(input)\n","    model_ft.eval()\n","    inputs = inputs.to(device)\n","    outputs = model_ft(inputs.unsqueeze(0))\n","    predicted.append(torch.max(outputs.data, 1)[1].cpu().item())"],"metadata":{"id":"Ec86iWbvlahX","executionInfo":{"status":"ok","timestamp":1701082862875,"user_tz":-360,"elapsed":461418,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["# **Create Submission**"],"metadata":{"id":"HPK7dKDul3JB"}},{"cell_type":"code","source":["submission = pd.read_csv(\"/content/drive/MyDrive/Digital Image Processing/data_set/sample_submission.csv\")\n","submission[\"Label\"] = predicted\n","submission.to_csv(\"submission.csv\", index=False)\n","print(submission.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LoPZAvnOl2sX","executionInfo":{"status":"ok","timestamp":1701083067271,"user_tz":-360,"elapsed":1369,"user":{"displayName":"Khondokar Md. Mehedi Hasan","userId":"05674734616194427330"}},"outputId":"562fe6e6-c517-40a9-fda5-225d21b5b7a4"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["   ImageId  Label\n","0        1      2\n","1        2      0\n","2        3      9\n","3        4      0\n","4        5      3\n"]}]}]}
